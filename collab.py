# -*- coding: utf-8 -*-
"""Transverse_loan_EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bg2nsOEn8CsyPs51vATQF5jdeLqenudx
"""

!pip install gspread

#On installe les dépendances pour lire un fichier dans un drive

from google.colab import auth
auth.authenticate_user()

import gspread
from oauth2client.client import GoogleCredentials

gc = gspread.authorize(GoogleCredentials.get_application_default())

#@title
# On ouvre la feuille
worksheet = gc.open('german_credit_data_with_risk.csv').sheet1

# On obtient les valeurs en colonnes
rows = worksheet.get_all_values()
print(rows)

import pandas as pd
pd.DataFrame.from_records(rows)

!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# L'authentification
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

import pandas as pd 
import numpy as np 
import seaborn as sns 
import matplotlib.pyplot as plt 


#On importe
df_credit = pd.read_csv('https://docs.google.com/spreadsheets/d/' + 
                   '1eFdoE7z4fvEnVJZfwYKHjqxXDBCBI7qSGoUMTlX-XAk' +
                   '/export?gid=1813192005&format=csv',
                   # On change la première colonne en data frame
                   index_col=0)

pd.DataFrame.from_records(rows)

print(df_credit.info())

print(df_credit.nunique())

print(df_credit.head())

def configure_plotly_browser_state():
  import IPython
  display(IPython.core.display.HTML('''
        <script src="/static/components/requirejs/require.js"></script>
        <script>
          requirejs.config({
            paths: {
              base: '/static/base',
              plotly: 'https://cdn.plot.ly/plotly-latest.min.js?noext',
            },
          });
        </script>
        '''))

import plotly.offline as py
py.init_notebook_mode(connected=True)
import plotly.graph_objs as go
import plotly.tools as tls
import warnings
from collections import Counter

configure_plotly_browser_state()

trace0 = go.Bar(
            x = df_credit[df_credit["Risk"]== 'acceptable']["Risk"].value_counts().index.values,
            y = df_credit[df_credit["Risk"]== 'acceptable']["Risk"].value_counts().values,
            name='Risque de défaut faible'
    )

trace1 = go.Bar(
            x = df_credit[df_credit["Risk"]== 'risqué']["Risk"].value_counts().index.values,
            y = df_credit[df_credit["Risk"]== 'risqué']["Risk"].value_counts().values,
            name='Risque de défaut élevé'
    )

data = [trace0, trace1]

layout = go.Layout(
    
)

layout = go.Layout(
    yaxis=dict(
        title='Compte'
    ),
    xaxis=dict(
        title='Valeur du risque'
    ),
    title='Répartition de la variable risque'
)

fig = go.Figure(data=data, layout=layout)

py.iplot(fig, filename='grouped-bar')

configure_plotly_browser_state()

df_good = df_credit.loc[df_credit["Risk"] == 'acceptable']['Age'].values.tolist()
df_bad = df_credit.loc[df_credit["Risk"] == 'risqué']['Age'].values.tolist()
df_age = df_credit['Age'].values.tolist()

#Premier graphe
trace0 = go.Histogram(
    x=df_good,
    histnorm='probabilité',
    name="Risque à défaut faible"
)
#Deuxième graphe
trace1 = go.Histogram(
    x=df_bad,
    histnorm='probabilité',
    name="Risque à défaut élevé"
)
#Troisième graphe
trace2 = go.Histogram(
    x=df_age,
    histnorm='probabilité',
    name="Age global"
)

fig = tls.make_subplots(rows=2, cols=2, specs=[[{}, {}], [{'colspan': 2}, None]],
                          subplot_titles=('acceptable','risqué', 'Distribution Générale'))

fig.append_trace(trace0, 1, 1)
fig.append_trace(trace1, 1, 2)
fig.append_trace(trace2, 2, 1)

fig['layout'].update(showlegend=True, title='Distribution des ages', bargap=0.05)
py.iplot(fig, filename='custom-sized-subplot-with-subplot-titles')

!pip install gspread

configure_plotly_browser_state()


df_good = df_credit[df_credit["Risk"] == 'acceptable']
df_bad = df_credit[df_credit["Risk"] == 'risqué']

fig, ax = plt.subplots(nrows=2, figsize=(12,8))
plt.subplots_adjust(hspace = 0.4, top = 0.8)

g1 = sns.distplot(df_good["Age"], ax=ax[0], 
             color="g")
g1 = sns.distplot(df_bad["Age"], ax=ax[0], 
             color='r')
g1.set_title("Distribuition des Ages", fontsize=15)
g1.set_xlabel("Age")
g1.set_xlabel("Fréquence")

g2 = sns.countplot(x="Age",data=df_credit, 
              palette="hls", ax=ax[1], 
              hue = "Risk")
g2.set_title("Risque en fonction de l'age", fontsize=15)
g2.set_xlabel("Age")
g2.set_xlabel("Compte")
plt.show()

#Création d'intervalles
interval = (18, 25, 35, 60, 120)

cats = ['Student', 'Young', 'Adult', 'Senior']
df_credit["Age_cat"] = pd.cut(df_credit.Age, interval, labels=cats)


df_acceptable = df_credit[df_credit["Risk"] == 'acceptable']
df_bad = df_credit[df_credit["Risk"] == 'risqué']

configure_plotly_browser_state()

trace0 = go.Box(
    y=df_good["Credit amount"],
    x=df_good["Age_cat"],
    name='Risque de défaut faible',
    marker=dict(
        color='#3D9970'
    )
)

trace1 = go.Box(
    y=df_bad['Credit amount'],
    x=df_bad['Age_cat'],
    name='Risque de défaut élevé',
    marker=dict(
        color='#FF4136'
    )
)
    
data = [trace0, trace1]

layout = go.Layout(
    yaxis=dict(
        title='Montant de l\'emprunt',
        zeroline=False
    ),
    xaxis=dict(
        title='Catégorie d'âge
    ),
    boxmode='group'
)
fig = go.Figure(data=data, layout=layout)

py.iplot(fig, filename='box-age-cat')

configure_plotly_browser_state()

#Premier graphe
trace0 = go.Bar(
    x = df_credit[df_credit["Risk"]== 'acceptable']["Housing"].value_counts().index.values,
    y = df_credit[df_credit["Risk"]== 'acceptable']["Housing"].value_counts().values,
    name='Risque de défaut faible'
)

#Deuxième graphe
trace1 = go.Bar(
    x = df_credit[df_credit["Risk"]== 'risqué']["Housing"].value_counts().index.values,
    y = df_credit[df_credit["Risk"]== 'risqué']["Housing"].value_counts().values,
    name="Risque de défaut élevé"
)

data = [trace0, trace1]

layout = go.Layout(
    title='Distribution en fonction du logement'
)


fig = go.Figure(data=data, layout=layout)

py.iplot(fig, filename='Housing-Grouped')

configure_plotly_browser_state()

fig = {
    "data": [
        {
            "type": 'violin',
            "x": df_good['Housing'],
            "y": df_good['Credit amount'],
            "legendgroup": 'Risque de défaut faible',
            "scalegroup": 'No',
            "name": 'Risque de défaut faible',
            "side": 'negative',
            "box": {
                "visible": True
            },
            "meanline": {
                "visible": True
            },
            "line": {
                "color": 'blue'
            }
        },
        {
            "type": 'violin',
            "x": df_bad['Housing'],
            "y": df_bad['Credit amount'],
            "legendgroup": 'Risque de défaut élevé',
            "scalegroup": 'No',
            "name": 'Risque de défaut élevé',
            "side": 'positive',
            "box": {
                "visible": True
            },
            "meanline": {
                "visible": True
            },
            "line": {
                "color": 'green'
            }
        }
    ],
    "layout" : {
        "yaxis": {
            "zeroline": False,
        },
        "violingap": 0,
        "violinmode": "overlay"
    }
}


py.iplot(fig, filename = 'violin/split', validate = False)

configure_plotly_browser_state()

#First plot
trace0 = go.Bar(
    x = df_credit[df_credit["Risk"]== 'acceptable']["Sex"].value_counts().index.values,
    y = df_credit[df_credit["Risk"]== 'acceptable']["Sex"].value_counts().values,
    name='Risque de défaut faible'
)

#First plot 2
trace1 = go.Bar(
    x = df_credit[df_credit["Risk"]== 'risqué']["Sex"].value_counts().index.values,
    y = df_credit[df_credit["Risk"]== 'risqué']["Sex"].value_counts().values,
    name="Risque de défaut élevé"
)

#Second plot
trace2 = go.Box(
    x = df_credit[df_credit["Risk"]== 'acceptable']["Sex"],
    y = df_credit[df_credit["Risk"]== 'acceptable']["Credit amount"],
    name=trace0.name
)

#Second plot 2
trace3 = go.Box(
    x = df_credit[df_credit["Risk"]== 'risqué']["Sex"],
    y = df_credit[df_credit["Risk"]== 'risqué']["Credit amount"],
    name=trace1.name
)

data = [trace0, trace1, trace2,trace3]


fig = tls.make_subplots(rows=1, cols=2, 
                        subplot_titles=('Sex Count', 'Credit Amount by Sex'))

fig.append_trace(trace0, 1, 1)
fig.append_trace(trace1, 1, 1)
fig.append_trace(trace2, 1, 2)
fig.append_trace(trace3, 1, 2)

fig['layout'].update(height=400, width=800, title='En fonction du sexe', boxmode='group')
py.iplot(fig, filename='sex-subplot')

configure_plotly_browser_state()

#Premier graphe
trace0 = go.Bar(
    x = df_credit[df_credit["Risk"]== 'acceptable']["Job"].value_counts().index.values,
    y = df_credit[df_credit["Risk"]== 'acceptable']["Job"].value_counts().values,
    name='Good credit Distribuition'
)

#Deuxième graphe
trace1 = go.Bar(
    x = df_credit[df_credit["Risk"]== 'risqué']["Job"].value_counts().index.values,
    y = df_credit[df_credit["Risk"]== 'risqué']["Job"].value_counts().values,
    name="Bad Credit Distribuition"
)

data = [trace0, trace1]

layout = go.Layout(
    title='En fonction du travail'
)

fig = go.Figure(data=data, layout=layout)

py.iplot(fig, filename='grouped-bar')

configure_plotly_browser_state()

trace0 = go.Box(
    x=df_good["Job"],
    y=df_good["Credit amount"],
    name='Risque de défaut faible'
)

trace1 = go.Box(
    x=df_bad['Job'],
    y=df_bad['Credit amount'],
    name='Risque de défaut élevé'
)
    
data = [trace0, trace1]

layout = go.Layout(
    yaxis=dict(
        title='Montant en fonction du travail'
    ),
    boxmode='group'
)
fig = go.Figure(data=data, layout=layout)

py.iplot(fig, filename='box-age-cat')

configure_plotly_browser_state()

fig = {
    "data": [
        {
            "type": 'violin',
            "x": df_good['Job'],
            "y": df_good['Age'],
            "legendgroup": 'Risque de défaut faible',
            "scalegroup": 'No',
            "name": 'Risque de défaut faible',
            "side": 'negative',
            "box": {
                "visible": True
            },
            "meanline": {
                "visible": True
            },
            "line": {
                "color": 'blue'
            }
        },
        {
            "type": 'violin',
            "x": df_bad['Job'],
            "y": df_bad['Age'],
            "legendgroup": 'Risque de défaut élevé',
            "scalegroup": 'No',
            "name": 'Risque de défaut élevé',
            "side": 'positive',
            "box": {
                "visible": True
            },
            "meanline": {
                "visible": True
            },
            "line": {
                "color": 'green'
            }
        }
    ],
    "layout" : {
        "yaxis": {
            "zeroline": False,
        },
        "violingap": 0,
        "violinmode": "overlay"
    }
}


py.iplot(fig, filename = 'Age-Housing', validate = False)

configure_plotly_browser_state()

fig, ax = plt.subplots(figsize=(12,12), nrows=2)

g1 = sns.boxplot(x="Job", y="Credit amount", data=df_credit, 
            palette="hls", ax=ax[0], hue="Risk")
g1.set_title("Credit Amount by Job", fontsize=15)
g1.set_xlabel("Job Reference", fontsize=12)
g1.set_ylabel("Credit Amount", fontsize=12)

g2 = sns.violinplot(x="Job", y="Age", data=df_credit, ax=ax[1],  
               hue="Risk", split=True, palette="hls")
g2.set_title("Job Type reference x Age", fontsize=15)
g2.set_xlabel("Job Reference", fontsize=12)
g2.set_ylabel("Age", fontsize=12)

plt.subplots_adjust(hspace = 0.4,top = 0.9)

plt.show()

from plotly.tools import FigureFactory as ff

import numpy as np

configure_plotly_browser_state()

# Add histogram data
x1 = np.log(df_good['Credit amount']) 
x2 = np.log(df_bad["Credit amount"])

# Group data together
hist_data = [x1, x2]

group_labels = ['Risque de défaut faible', 'Risque de défaut élevé']

# Create distplot with custom bin_size
fig = ff.create_distplot(hist_data, group_labels, bin_size=.2)

# Plot!
py.iplot(fig, filename='Distplot with Multiple Datasets')

plt.figure(figsize = (8,5))

g= sns.distplot(df_good['Credit amount'], color='r')
g = sns.distplot(df_bad["Credit amount"], color='g')
g.set_title("Credit Amount Frequency distribuition", fontsize=15)
plt.show()

from plotly import tools
import numpy as np
import plotly.graph_objs as go

configure_plotly_browser_state()

count_good = go.Bar(
    x = df_good["Saving accounts"].value_counts().index.values,
    y = df_good["Saving accounts"].value_counts().values,
    name='Risque de défaut faible'
)
count_bad = go.Bar(
    x = df_bad["Saving accounts"].value_counts().index.values,
    y = df_bad["Saving accounts"].value_counts().values,
    name='Risque de défaut élevé'
)


box_1 = go.Box(
    x=df_good["Saving accounts"],
    y=df_good["Credit amount"],
    name='Risque de défaut faible'
)
box_2 = go.Box(
    x=df_bad["Saving accounts"],
    y=df_bad["Credit amount"],
    name='Risque de défaut élevé'
)

scat_1 = go.Box(
    x=df_good["Saving accounts"],
    y=df_good["Age"],
    name='Risque de défaut faible'
)
scat_2 = go.Box(
    x=df_bad["Saving accounts"],
    y=df_bad["Age"],
    name='Risque de défaut élevé'
)

data = [scat_1, scat_2, box_1, box_2, count_good, count_bad]

fig = tools.make_subplots(rows=2, cols=2, specs=[[{}, {}], [{'colspan': 2}, None]],
                          subplot_titles=('En fonction du montant de l\'épargne','Montant en fonction de l\'épargne, 
                                          'Age en fonction de l\'épargne'))

fig.append_trace(count_good, 1, 1)
fig.append_trace(count_bad, 1, 1)

fig.append_trace(box_2, 1, 2)
fig.append_trace(box_1, 1, 2)

fig.append_trace(scat_1, 2, 1)
fig.append_trace(scat_2, 2, 1)



fig['layout'].update(height=700, width=800, title='Exploration des livrets', boxmode='group')

py.iplot(fig, filename='combined-savings')

print("Distribution du risque selon l'épargne  ")
print(pd.crosstab(df_credit["Saving accounts"],df_credit.Risk))

fig, ax = plt.subplots(3,1, figsize=(12,12))
g = sns.countplot(x="Saving accounts", data=df_credit, palette="hls", 
              ax=ax[0],hue="Risk")
g.set_title("Epargne", fontsize=15)
g.set_xlabel("Type", fontsize=12)
g.set_ylabel("Montant", fontsize=12)

g1 = sns.violinplot(x="Saving accounts", y="Job", data=df_credit, palette="hls", 
               hue = "Risk", ax=ax[1],split=True)
g1.set_title("Saving Accounts by Job", fontsize=15)
g1.set_xlabel("Savings Accounts type", fontsize=12)
g1.set_ylabel("Job", fontsize=12)

g = sns.boxplot(x="Saving accounts", y="Credit amount", data=df_credit, ax=ax[2],
            hue = "Risk",palette="hls")
g2.set_title("En fonction du montant du crédit", fontsize=15)
g2.set_xlabel("Type", fontsize=12)
g2.set_ylabel("Montant", fontsize=12)

plt.subplots_adjust(hspace = 0.4,top = 0.9)

plt.show()

print("Values describe: ")
print(pd.crosstab(df_credit.Purpose, df_credit.Risk))

plt.figure(figsize = (14,12))

plt.subplot(221)
g = sns.countplot(x="Objectif", data=df_credit, 
              palette="hls", hue = "Risk")
g.set_xticklabels(g.get_xticklabels(),rotation=45)
g.set_xlabel("", fontsize=12)
g.set_ylabel("Montant", fontsize=12)
g.set_title("Objectif par montant", fontsize=20)

plt.subplot(222)
g1 = sns.violinplot(x="Objectif", y="Age", data=df_credit, 
                    palette="hls", hue = "Risk",split=True)
g1.set_xticklabels(g1.get_xticklabels(),rotation=45)
g1.set_xlabel("", fontsize=12)
g1.set_ylabel("Montant", fontsize=12)
g1.set_title("Objectif par l'age", fontsize=20)

plt.subplot(212)
g2 = sns.boxplot(x="Objectif", y="Montant", data=df_credit, 
               palette="hls", hue = "Risk")
g2.set_xlabel("Objectif", fontsize=12)
g2.set_ylabel("Montantt", fontsize=12)
g2.set_title("Distribution par objectif", fontsize=20)

plt.subplots_adjust(hspace = 0.6, top = 0.8)

plt.show()

plt.figure(figsize = (12,14))

g= plt.subplot(311)
g = sns.countplot(x="Duree", data=df_credit, 
              palette="hls",  hue = "Risk")
g.set_xlabel("Distribution", fontsize=12)
g.set_ylabel("Montant", fontsize=12)
g.set_title("en fonction de la durée", fontsize=20)

g1 = plt.subplot(312)
g1 = sns.pointplot(x="Duree", y ="Montant",data=df_credit,
                   hue="Risk", palette="hls")
g1.set_xlabel("Duree", fontsize=12)
g1.set_ylabel("Montant", fontsize=12)
g1.set_title("Montant en fonction de la distribution", fontsize=20)

g2 = plt.subplot(313)
g2 = sns.distplot(df_good["Duration"], color='g')
g2 = sns.distplot(df_bad["Duration"], color='r')
g2.set_xlabel("Duree", fontsize=12)
g2.set_ylabel("Fréquence", fontsize=12)
g2.set_title("Durée et fréaquence selon le profit", fontsize=20)

plt.subplots_adjust(wspace = 0.4, hspace = 0.4,top = 0.9)

plt.show()

configure_plotly_browser_state()

#Premier graphe
trace0 = go.Bar(
    x = df_credit[df_credit["Risk"]== 'acceptable']["Checking account"].value_counts().index.values,
    y = df_credit[df_credit["Risk"]== 'acceptable']["Checking account"].value_counts().values,
    name='Distribution des bons risques' 
    
)

#Deuxième graphe
trace1 = go.Bar(
    x = df_credit[df_credit["Risk"]== 'risqué']["Checking account"].value_counts().index.values,
    y = df_credit[df_credit["Risk"]== 'risqué']["Checking account"].value_counts().values,
    name="Distribution des mauvais risques"
)

data = [trace0, trace1]

layout = go.Layout(
    title='Distribution des comptes courrants',
    xaxis=dict(title='Type'),
    yaxis=dict(title='Montant'),
    barmode='group'
)


fig = go.Figure(data=data, layout=layout)

py.iplot(fig, filename = 'Age-ba', validate = False)

configure_plotly_browser_state()

df_acceptable = df_credit[df_credit["Risk"] == 'acceptable']
df_bad = df_credit[df_credit["Risk"] == 'risqué']

trace0 = go.Box(
    y=df_good["Credit amount"],
    x=df_good["Checking account"],
    name='Risque de défaut faible',
    marker=dict(
        color='#3D9970'
    )
)

trace1 = go.Box(
    y=df_bad['Credit amount'],
    x=df_bad['Checking account'],
    name='Risque de défaut élevé',
    marker=dict(
        color='#FF4136'
    )
)
    
data = [trace0, trace1]

layout = go.Layout(
    yaxis=dict(
        title='Cheking distribuition'
    ),
    boxmode='group'
)
fig = go.Figure(data=data, layout=layout)

py.iplot(fig, filename='box-age-cat')

print(df_credit.groupby("Checking account")["Checking account"].count())

plt.figure(figsize = (12,10))

g = plt.subplot(221)
g = sns.countplot(x="Checking account", data=df_credit, 
              palette="hls", hue="Risk")
g.set_xlabel("Compte courant", fontsize=12)
g.set_ylabel("Montant", fontsize=12)
g.set_title("En fonction du risque", fontsize=20)

g1 = plt.subplot(222)
g1 = sns.violinplot(x="Compte courant", y="Age", data=df_credit, palette="hls", hue = "Risk",split=True)
g1.set_xlabel("Compte courant", fontsize=12)
g1.set_ylabel("Age", fontsize=12)
g1.set_title("Age en fonction du Compte courant", fontsize=20)

g2 = plt.subplot(212)
g2 = sns.boxplot(x="Compte courant",y="Montant", data=df_credit,hue='Risk',palette="hls")
g2.set_xlabel("Compte courant", fontsize=12)
g2.set_ylabel("Montant", fontsize=12)
g2.set_title("Montant en fonction du Compte courant", fontsize=20)

plt.subplots_adjust(wspace = 0.2, hspace = 0.3, top = 0.9)

plt.show()
plt.show()

print(pd.crosstab(df_credit.Sex, df_credit.Job))

plt.figure(figsize = (10,6))

g = sns.violinplot(x="Logement",y="Job",data=df_credit,
                   hue="Risk", palette="hls",split=True)
g.set_xlabel("Logement", fontsize=12)
g.set_ylabel("Travail", fontsize=12)
g.set_title("Logement x Travail - Dist", fontsize=20)

plt.show()

print(pd.crosstab(df_credit["Compte courant"],df_credit.Sex))

date_int = ["Objectif", 'Sexe']
cm = sns.light_palette("green", as_cmap=True)
pd.crosstab(df_credit[date_int[0]], df_credit[date_int[1]]).style.background_gradient(cmap = cm)

date_int = ["Objectif", 'Sexe']
cm = sns.light_palette("green", as_cmap=True)
pd.crosstab(df_credit[date_int[0]], df_credit[date_int[1]]).style.background_gradient(cmap = cm)

print("Objectif : ",df_credit.Purpose.unique())
print("Sexe : ",df_credit.Sex.unique())
print("Logement : ",df_credit.Housing.unique())
print("Epargne : ",df_credit['Saving accounts'].unique())
print("Risque : ",df_credit['Risk'].unique())
print("Compte courant : ",df_credit['Checking account'].unique())
print("Aget_cat : ",df_credit['Age_cat'].unique())

df_credit.Purpose.replace(('radio/TV', 'education','furniture/equipment', 'car', 'business', 'domestic appliances','repairs','vacation/others'), (0,1,2,3,4,5,6,7), inplace=True)

df_credit.Sex.replace(('female','male'), (0,1), inplace=True)

df_credit.Housing.replace(('own','free','rent'), (0,1,2), inplace=True)

df_credit["Saving accounts"].replace((str('nan'), 'little', 'quite rich', 'rich', 'moderate'), (0,1,3,4,2), inplace=True)

df_credit.Risk.replace(('acceptable', 'risqué'),(0,1), inplace=True)

df_credit["Checking account"].replace(('little', 'moderate', 'rich'), (0,1,2), inplace=True)

df_credit["Age_cat"].replace(('Student', 'Young', 'Adult','Senior'), (0,1,2,3), inplace=True)

plt.figure(figsize=(14,12))
sns.heatmap(df_credit.astype(float).corr(),linewidths=0.1,vmax=1.0, 
            square=True,  linecolor='white', annot=True)
plt.show()

from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

del df_credit["Saving accounts"]
del df_credit["Checking account"]

#Création des variables X et y
X = df_credit.drop('Risk', 1).values
y = df_credit["Risk"].values

#On sépare en 2
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state=42)

model = RandomForestClassifier(n_estimators=10, random_state=0, class_weight="balanced_subsample", )

# On entraine
model.fit(X_train, y_train)

# Score d'entrainement
print("Training score data: ")
print(model.score(X_train, y_train))

#On entraine et on teste
y_pred = model.predict(X_test)

print(accuracy_score(y_test,y_pred))
print("\n")
print(confusion_matrix(y_test, y_pred))
print("\n")
print(classification_report(y_test, y_pred))

from sklearn.utils import resample
from sklearn.metrics import roc_curve

#On sépare les données
df_test, df_train = train_test_split(df_credit, test_size = 0.7, random_state=42)

X = df_train.drop('Risk', 1).values
y = df_train["Risk"].values

X_test = df_test.drop('Risk', 1).values
y_test = df_test["Risk"].values

# Classificateur logreg
logreg = LogisticRegression(random_state=0)


model = logreg.fit(X_train, y_train)

# On affiche les scores
print("Training score data: ")
print(model.score(X_train, y_train))

y_pred = model.predict(X_test)

print(accuracy_score(y_test,y_pred))
print("\n")
print(confusion_matrix(y_test, y_pred))
print("\n")
print(classification_report(y_test, y_pred))

y_pred_prob = model.predict_proba(X_test)[:,1]


fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)


#Courbe ROC
plt.plot([0, 1], [0, 1], 'k--')
plt.plot(fpr, tpr)
plt.xlabel('Taux de faux positifs')
plt.ylabel('Taux de positifs')
plt.title('ROC courbe')
plt.show()

print(df_train)
print(df_test)
